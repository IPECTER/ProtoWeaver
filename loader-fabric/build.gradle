apply plugin: "dev.architectury.loom"

architectury {
    injectInjectables = false
    platformSetupLoomIde()
    fabric()
}

loom {
    silentMojangMappingsLicense()
}

dependencies {
    shadowCommon(api(project(path: ":loader-common", configuration: "shadow")))
    shadowCommon(api(project(path: ":loader-common", configuration: "transformProductionFabric"))) { transitive false }

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Include
    shadowCommon api("io.netty:netty-codec-http:${project.netty_version}") {
        exclude group: "io.netty", module: "netty-buffer"
        exclude group: "io.netty", module: "netty-transport"
        exclude group: "io.netty", module: "netty-handler"
    }
    shadowCommon api("io.netty:netty-codec-http2:${project.netty_version}") {
        exclude group: "io.netty", module: "netty-buffer"
        exclude group: "io.netty", module: "netty-transport"
        exclude group: "io.netty", module: "netty-handler"
    }
    shadowCommon api("org.bouncycastle:bcpkix-jdk18on:${project.bouncy_version}")

    // Mod Compat
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "maven.modrinth:fabricproxy-lite:${project.proxy_lite_version}"
    modLocalRuntime "com.moandjiezana.toml:toml4j:${project.toml4j_version}"

    // Dev
    modLocalRuntime "maven.modrinth:easy-eula:1.0.0"
}

shadowJar {
    relocate('io.netty', 'me.mrnavastar.protoweaver.libs.netty') {
        exclude 'io.netty.channel.*'
        exclude 'io.netty.buffer.*'
        exclude 'io.netty.handler.ssl.*'
    }
    relocate "org.bouncycastle", "me.mrnavastar.protoweaver.libs.bouncycastle"

    minimize {
        exclude(dependency("org.bouncycastle:bcpkix-jdk18on:.*"))
    }
    minimize()
}

jar.finalizedBy(shadowJar)

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

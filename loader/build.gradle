plugins {
    id 'fabric-loom' version '1.4.4'
}

def targetJavaVersion = project.javaVersion as Integer
version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://api.modrinth.com/maven" }
    maven { url = 'https://maven.minecraftforge.net' }
}

dependencies {
    shadow implementation(project(path: ":api", configuration: "shadow")) {
        exclude(group: "io.netty")
    }
    shadow implementation(project(path: ':core', configuration: 'default')) {
        exclude(group: "org.apache.logging.log4j")
    }

    compileOnly "io.netty:netty-buffer:${project.netty_version}"
    compileOnly "io.netty:netty-transport:${project.netty_version}"
    compileOnly "io.netty:netty-handler:${project.netty_version}"
    compileOnly "io.netty:netty-codec-http:${project.netty_version}"
    shadow implementation("io.netty:netty-codec-http2:${project.netty_version}")

    shadow implementation("org.bouncycastle:bcpkix-jdk18on:${project.bouncy_version}")

    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //Forge
    compileOnly "net.minecraftforge:javafmllanguage:${project.forge_version}"
    compileOnly "net.minecraftforge:fmlloader:${project.forge_version}"

    // Dev Env
    modImplementation("maven.modrinth:easy-eula:1.0.0")
    modImplementation("maven.modrinth:fabricproxy-lite:v2.7.0")
    modImplementation "com.moandjiezana.toml:toml4j:0.7.2"
}

shadowJar {
    archiveBaseName.set('protoweaver')
    configurations = [project.configurations.shadow]

    dependencies {
        mergeServiceFiles()
    }

    minimize {
        exclude(project(":api"))
        exclude(dependency("org.bouncycastle:bcpkix-jdk18on:.*"))
    }
    minimize()
}

jar.finalizedBy(shadowJar)

remapJar {
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)

    inputFile = file(shadowJar.archivePath)
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
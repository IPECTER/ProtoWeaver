apply plugin: "dev.architectury.loom"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "protoweaver.mixins.json"
    }
    silentMojangMappingsLicense()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    shadowCommon(compileOnly(project(path: ":loader-common", configuration: "default")))
    shadowCommon(project(path: ":loader-common", configuration: "transformProductionForge")) { transitive false }

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    forge "net.minecraftforge:forge:${project.forge_version}"

    // Libs
    include forgeRuntimeLibrary(implementation("com.esotericsoftware:kryo5:${project.kyro_version}"))
    include forgeRuntimeLibrary(implementation("org.bouncycastle:bcpkix-jdk18on:${project.bouncy_version}"))
    include forgeRuntimeLibrary(implementation("io.netty:netty-codec-http:${project.netty_version}"))
    include forgeRuntimeLibrary(implementation("io.netty:netty-codec-http2:${project.netty_version}"))

    // Mod Compat
    modCompileOnly "maven.modrinth:proxy-compatible-forge:${project.proxy_forge_version}"

    //Dev
    modLocalRuntime "maven.modrinth:easy-eula:1.1.0-forge"
}

jar {
    dependsOn(':loader-common:transformProductionForge')
    from {
        exclude "architectury.common.marker"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.shadowCommon.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jar.finalizedBy(remapJar)
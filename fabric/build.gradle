apply plugin: "dev.architectury.loom"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    silentMojangMappingsLicense()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    shadowCommon(compileOnly(project(path: ":loader-common", configuration: "default")))
    shadowCommon(project(path: ":loader-common", configuration: "transformProductionFabric")) { transitive false }

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modCompileOnly "net.fabricmc:fabric-loader:${project.loader_version}"

    // Libs
    include implementation("com.esotericsoftware:kryo5:${project.kyro_version}")
    include implementation("org.bouncycastle:bcpkix-jdk18on:${project.bouncy_version}")
    include "org.bouncycastle:bcprov-jdk18on:${project.bouncy_version}"
    include "org.bouncycastle:bcutil-jdk18on:${project.bouncy_version}"
    include implementation("io.netty:netty-codec-http:${project.netty_version}")
    include implementation("io.netty:netty-codec-http2:${project.netty_version}")

    // Mod Compat
    modCompileOnly "maven.modrinth:fabricproxy-lite:${project.proxy_lite_version}"
    modLocalRuntime "com.moandjiezana.toml:toml4j:${project.toml4j_version}"

    // Dev
    modLocalRuntime "maven.modrinth:easy-eula:1.1.0-fabric"
}

jar {
    dependsOn(':loader-common:transformProductionFabric')
    from {
        exclude "architectury.common.marker"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.shadowCommon.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

remapJar {
    archiveFileName = "protoweaver-${version}-fabric.jar"
}

jar.finalizedBy(remapJar)